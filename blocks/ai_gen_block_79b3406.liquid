{% doc %}
  @prompt
    A masonry gallery section for 6 pictures with hover effects and shadow., the images need to be contained so their size is good, keep the layout as masonry while having the images contained
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-masonry-gallery-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
    background: rgb(var(--color-background));
    color: rgb(var(--color-foreground));
  }

  .ai-masonry-gallery__container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-masonry-gallery__title-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: {{ block.settings.title_spacing }}px;
    font-size: {{ block.settings.title_size }}px;
    color: rgb(var(--color-foreground));
  }

  .ai-masonry-gallery__grid-{{ ai_gen_id }} {
    column-count: {{ block.settings.columns_desktop }};
    column-gap: {{ block.settings.gap }}px;
    column-fill: balance;
  }

  .ai-masonry-gallery__item-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
    box-shadow: {{ block.settings.shadow_intensity }}px {{ block.settings.shadow_intensity | times: 2 }}px {{ block.settings.shadow_intensity | times: 4 }}px rgba(0, 0, 0, {{ block.settings.shadow_opacity | divided_by: 100.0 }});
    transition: all 0.3s ease;
    cursor: pointer;
    margin-bottom: {{ block.settings.gap }}px;
    break-inside: avoid;
    display: inline-block;
    width: 100%;
    height: {{ block.settings.item_height }}px;
  }

  .ai-masonry-gallery__item-{{ ai_gen_id }}:hover {
    transform: translateY(-{{ block.settings.hover_lift }}px);
    box-shadow: {{ block.settings.shadow_intensity | times: 2 }}px {{ block.settings.shadow_intensity | times: 3 }}px {{ block.settings.shadow_intensity | times: 6 }}px rgba(0, 0, 0, {{ block.settings.shadow_opacity | times: 1.5 | divided_by: 100.0 }});
  }

  .ai-masonry-gallery__item-{{ ai_gen_id }}:nth-child(6n+1) {
    height: {{ block.settings.item_height | times: 1.4 }}px;
  }

  .ai-masonry-gallery__item-{{ ai_gen_id }}:nth-child(6n+3) {
    height: {{ block.settings.item_height | times: 1.2 }}px;
  }

  .ai-masonry-gallery__item-{{ ai_gen_id }}:nth-child(6n+5) {
    height: {{ block.settings.item_height | times: 1.6 }}px;
  }

  .ai-masonry-gallery__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform 0.3s ease;
    display: block;
  }

  .ai-masonry-gallery__item-{{ ai_gen_id }}:hover .ai-masonry-gallery__image-{{ ai_gen_id }} {
    transform: scale({{ block.settings.hover_scale | divided_by: 100.0 }});
  }

  .ai-masonry-gallery__overlay-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 0) 0%,
      rgba(0, 0, 0, {{ block.settings.overlay_opacity | divided_by: 100.0 }}) 100%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    display: flex;
    align-items: flex-end;
    padding: 20px;
  }

  .ai-masonry-gallery__item-{{ ai_gen_id }}:hover .ai-masonry-gallery__overlay-{{ ai_gen_id }} {
    opacity: 1;
  }

  .ai-masonry-gallery__caption-{{ ai_gen_id }} {
    color: white;
    font-size: 16px;
    font-weight: 500;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
  }

  .ai-masonry-gallery__placeholder-{{ ai_gen_id }} {
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    position: relative;
  }

  .ai-masonry-gallery__placeholder-{{ ai_gen_id }} svg {
    width: 60px;
    height: 60px;
    opacity: 0.3;
  }

  .ai-masonry-gallery__empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 10px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 12px;
    color: #666;
    text-align: center;
  }

  @media screen and (max-width: 768px) {
    .ai-masonry-gallery__grid-{{ ai_gen_id }} {
      column-count: {{ block.settings.columns_tablet }};
      column-gap: {{ block.settings.gap | times: 0.7 }}px;
    }

    .ai-masonry-gallery__container-{{ ai_gen_id }} {
      padding: 0 15px;
    }

    .ai-masonry-gallery__item-{{ ai_gen_id }} {
      margin-bottom: {{ block.settings.gap | times: 0.7 }}px;
      height: {{ block.settings.item_height | times: 0.8 }}px;
    }

    .ai-masonry-gallery__item-{{ ai_gen_id }}:nth-child(6n+1) {
      height: {{ block.settings.item_height | times: 1.1 }}px;
    }

    .ai-masonry-gallery__item-{{ ai_gen_id }}:nth-child(6n+3) {
      height: {{ block.settings.item_height | times: 1.0 }}px;
    }

    .ai-masonry-gallery__item-{{ ai_gen_id }}:nth-child(6n+5) {
      height: {{ block.settings.item_height | times: 1.3 }}px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-masonry-gallery__grid-{{ ai_gen_id }} {
      column-count: {{ block.settings.columns_mobile }};
      column-gap: {{ block.settings.gap | times: 0.5 }}px;
    }

    .ai-masonry-gallery__item-{{ ai_gen_id }} {
      margin-bottom: {{ block.settings.gap | times: 0.5 }}px;
      height: {{ block.settings.item_height | times: 0.7 }}px;
    }

    .ai-masonry-gallery__item-{{ ai_gen_id }}:nth-child(6n+1) {
      height: {{ block.settings.item_height | times: 0.9 }}px;
    }

    .ai-masonry-gallery__item-{{ ai_gen_id }}:nth-child(6n+3) {
      height: {{ block.settings.item_height | times: 0.8 }}px;
    }

    .ai-masonry-gallery__item-{{ ai_gen_id }}:nth-child(6n+5) {
      height: {{ block.settings.item_height | times: 1.1 }}px;
    }
  }
{% endstyle %}

<masonry-gallery-{{ ai_gen_id }}
  class="ai-masonry-gallery-{{ ai_gen_id }} color-{{ block.settings.color_scheme }} gradient"
  {{ block.shopify_attributes }}
>
  <div class="ai-masonry-gallery__container-{{ ai_gen_id }}">
    {% if block.settings.title != blank %}
      <h2 class="ai-masonry-gallery__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
    {% endif %}

    <div class="ai-masonry-gallery__grid-{{ ai_gen_id }}">
      {% for i in (1..6) %}
        {% liquid
          assign image_key = 'image_' | append: i
          assign caption_key = 'caption_' | append: i
          assign image = block.settings[image_key]
          assign caption = block.settings[caption_key]
        %}

        <div
          class="ai-masonry-gallery__item-{{ ai_gen_id }}"
          data-item="{{ i }}"
        >
          {% if image %}
            <img
              src="{{ image | image_url: width: 600 }}"
              alt="{{ image.alt | escape }}"
              loading="lazy"
              width="{{ image.width }}"
              height="{{ image.height }}"
              class="ai-masonry-gallery__image-{{ ai_gen_id }}"
            >
            {% if caption != blank %}
              <div class="ai-masonry-gallery__overlay-{{ ai_gen_id }}">
                <div class="ai-masonry-gallery__caption-{{ ai_gen_id }}">{{ caption }}</div>
              </div>
            {% endif %}
          {% else %}
            <div class="ai-masonry-gallery__placeholder-{{ ai_gen_id }}">
              {{ 'image' | placeholder_svg_tag }}
              <div class="ai-masonry-gallery__empty-state-{{ ai_gen_id }}">
                Add image {{ i }}
              </div>
            </div>
          {% endif %}
        </div>
      {% endfor %}
    </div>
  </div>
</masonry-gallery-{{ ai_gen_id }}>

<script>
  (function() {
    class MasonryGallery{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.initMasonry();
        window.addEventListener('resize', this.debounce(this.initMasonry.bind(this), 250));
      }

      initMasonry() {
        const items = this.querySelectorAll('.ai-masonry-gallery__item-{{ ai_gen_id }}');
        
        items.forEach((item) => {
          const img = item.querySelector('.ai-masonry-gallery__image-{{ ai_gen_id }}');
          
          if (img && !img.complete) {
            img.addEventListener('load', () => {
              this.adjustItemHeight(item);
            });
          } else if (img) {
            this.adjustItemHeight(item);
          }
        });
      }

      adjustItemHeight(item) {
        const img = item.querySelector('.ai-masonry-gallery__image-{{ ai_gen_id }}');
        if (!img) return;

        const itemWidth = item.offsetWidth;
        const aspectRatio = img.naturalHeight / img.naturalWidth;
        const naturalHeight = itemWidth * aspectRatio;
        
        const baseHeight = parseInt(getComputedStyle(item).height);
        const adjustedHeight = Math.max(baseHeight * 0.8, Math.min(baseHeight * 1.8, naturalHeight));
        
        item.style.height = adjustedHeight + 'px';
      }

      debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }
    }

    customElements.define('masonry-gallery-{{ ai_gen_id }}', MasonryGallery{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Masonry gallery",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "scheme-1"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Gallery title",
      "default": "Our Gallery"
    },
    {
      "type": "header",
      "content": "Images"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "Image 1"
    },
    {
      "type": "text",
      "id": "caption_1",
      "label": "Caption 1"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "Image 2"
    },
    {
      "type": "text",
      "id": "caption_2",
      "label": "Caption 2"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "Image 3"
    },
    {
      "type": "text",
      "id": "caption_3",
      "label": "Caption 3"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "Image 4"
    },
    {
      "type": "text",
      "id": "caption_4",
      "label": "Caption 4"
    },
    {
      "type": "image_picker",
      "id": "image_5",
      "label": "Image 5"
    },
    {
      "type": "text",
      "id": "caption_5",
      "label": "Caption 5"
    },
    {
      "type": "image_picker",
      "id": "image_6",
      "label": "Image 6"
    },
    {
      "type": "text",
      "id": "caption_6",
      "label": "Caption 6"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "columns_desktop",
      "label": "Columns on desktop",
      "options": [
        { "value": "2", "label": "2" },
        { "value": "3", "label": "3" },
        { "value": "4", "label": "4" }
      ],
      "default": "3"
    },
    {
      "type": "select",
      "id": "columns_tablet",
      "label": "Columns on tablet",
      "options": [
        { "value": "2", "label": "2" },
        { "value": "3", "label": "3" }
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Columns on mobile",
      "options": [
        { "value": "1", "label": "1" },
        { "value": "2", "label": "2" }
      ],
      "default": "1"
    },
    {
      "type": "range",
      "id": "item_height",
      "min": 200,
      "max": 400,
      "step": 20,
      "unit": "px",
      "label": "Base item height",
      "default": 280
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 32
    },
    {
      "type": "range",
      "id": "title_spacing",
      "min": 10,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Title spacing",
      "default": 30
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Section padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "gap",
      "min": 10,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Grid gap",
      "default": 20
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Shadow"
    },
    {
      "type": "range",
      "id": "shadow_intensity",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Shadow intensity",
      "default": 4
    },
    {
      "type": "range",
      "id": "shadow_opacity",
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "%",
      "label": "Shadow opacity",
      "default": 15
    },
    {
      "type": "header",
      "content": "Hover effects"
    },
    {
      "type": "range",
      "id": "hover_lift",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Hover lift",
      "default": 8
    },
    {
      "type": "range",
      "id": "hover_scale",
      "min": 100,
      "max": 120,
      "step": 2,
      "unit": "%",
      "label": "Image scale on hover",
      "default": 106
    },
    {
      "type": "range",
      "id": "overlay_opacity",
      "min": 0,
      "max": 80,
      "step": 5,
      "unit": "%",
      "label": "Overlay opacity",
      "default": 40
    }
  ],
  "presets": [
    {
      "name": "Masonry gallery"
    }
  ]
}
{% endschema %}